// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testChildren(t *testing.T) {
	t.Parallel()

	query := Children()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testChildrenDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChildrenQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Children().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChildrenSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChildSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testChildrenExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ChildExists(ctx, tx, o.PersonID, o.SubNo)
	if err != nil {
		t.Errorf("Unable to check if Child exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ChildExists to return true, but got false.")
	}
}

func testChildrenFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	childFound, err := FindChild(ctx, tx, o.PersonID, o.SubNo)
	if err != nil {
		t.Error(err)
	}

	if childFound == nil {
		t.Error("want a record, got nil")
	}
}

func testChildrenBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Children().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testChildrenOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Children().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testChildrenAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	childOne := &Child{}
	childTwo := &Child{}
	if err = randomize.Struct(seed, childOne, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}
	if err = randomize.Struct(seed, childTwo, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = childOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = childTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Children().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testChildrenCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	childOne := &Child{}
	childTwo := &Child{}
	if err = randomize.Struct(seed, childOne, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}
	if err = randomize.Struct(seed, childTwo, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = childOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = childTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func childBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func childAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Child) error {
	*o = Child{}
	return nil
}

func testChildrenHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Child{}
	o := &Child{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, childDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Child object: %s", err)
	}

	AddChildHook(boil.BeforeInsertHook, childBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	childBeforeInsertHooks = []ChildHook{}

	AddChildHook(boil.AfterInsertHook, childAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	childAfterInsertHooks = []ChildHook{}

	AddChildHook(boil.AfterSelectHook, childAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	childAfterSelectHooks = []ChildHook{}

	AddChildHook(boil.BeforeUpdateHook, childBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	childBeforeUpdateHooks = []ChildHook{}

	AddChildHook(boil.AfterUpdateHook, childAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	childAfterUpdateHooks = []ChildHook{}

	AddChildHook(boil.BeforeDeleteHook, childBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	childBeforeDeleteHooks = []ChildHook{}

	AddChildHook(boil.AfterDeleteHook, childAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	childAfterDeleteHooks = []ChildHook{}

	AddChildHook(boil.BeforeUpsertHook, childBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	childBeforeUpsertHooks = []ChildHook{}

	AddChildHook(boil.AfterUpsertHook, childAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	childAfterUpsertHooks = []ChildHook{}
}

func testChildrenInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChildrenInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(childColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testChildToOnePersonUsingPerson(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Child
	var foreign Person

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PersonID = foreign.PersonID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Person().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.PersonID != foreign.PersonID {
		t.Errorf("want: %v, got %v", foreign.PersonID, check.PersonID)
	}

	slice := ChildSlice{&local}
	if err = local.L.LoadPerson(ctx, tx, false, (*[]*Child)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Person = nil
	if err = local.L.LoadPerson(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Person == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testChildToOneSetOpPersonUsingPerson(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Child
	var b, c Person

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, childDBTypes, false, strmangle.SetComplement(childPrimaryKeyColumns, childColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Person{&b, &c} {
		err = a.SetPerson(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Person != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Children[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PersonID != x.PersonID {
			t.Error("foreign key was wrong value", a.PersonID)
		}

		if exists, err := ChildExists(ctx, tx, a.PersonID, a.SubNo); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testChildrenReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChildrenReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ChildSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testChildrenSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Children().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	childDBTypes = map[string]string{`PersonID`: `bigint`, `SubNo`: `tinyint`, `FirstName`: `varchar`, `LastName`: `varchar`, `Birthday`: `date`}
	_            = bytes.MinRead
)

func testChildrenUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(childPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(childAllColumns) == len(childPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, childDBTypes, true, childPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testChildrenSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(childAllColumns) == len(childPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Child{}
	if err = randomize.Struct(seed, o, childDBTypes, true, childColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, childDBTypes, true, childPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(childAllColumns, childPrimaryKeyColumns) {
		fields = childAllColumns
	} else {
		fields = strmangle.SetComplement(
			childAllColumns,
			childPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ChildSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testChildrenUpsert(t *testing.T) {
	t.Parallel()

	if len(childAllColumns) == len(childPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLChildUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Child{}
	if err = randomize.Struct(seed, &o, childDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Child: %s", err)
	}

	count, err := Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, childDBTypes, false, childPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Child struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Child: %s", err)
	}

	count, err = Children().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
