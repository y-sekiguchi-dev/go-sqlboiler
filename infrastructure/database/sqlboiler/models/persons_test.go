// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPersons(t *testing.T) {
	t.Parallel()

	query := Persons()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPersonsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Persons().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPersonsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PersonExists(ctx, tx, o.PersonID)
	if err != nil {
		t.Errorf("Unable to check if Person exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PersonExists to return true, but got false.")
	}
}

func testPersonsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	personFound, err := FindPerson(ctx, tx, o.PersonID)
	if err != nil {
		t.Error(err)
	}

	if personFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPersonsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Persons().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPersonsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Persons().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPersonsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Persons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPersonsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	personOne := &Person{}
	personTwo := &Person{}
	if err = randomize.Struct(seed, personOne, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err = randomize.Struct(seed, personTwo, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = personOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = personTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func personBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func personAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Person) error {
	*o = Person{}
	return nil
}

func testPersonsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Person{}
	o := &Person{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, personDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Person object: %s", err)
	}

	AddPersonHook(boil.BeforeInsertHook, personBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	personBeforeInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterInsertHook, personAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	personAfterInsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterSelectHook, personAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	personAfterSelectHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpdateHook, personBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	personBeforeUpdateHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpdateHook, personAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	personAfterUpdateHooks = []PersonHook{}

	AddPersonHook(boil.BeforeDeleteHook, personBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	personBeforeDeleteHooks = []PersonHook{}

	AddPersonHook(boil.AfterDeleteHook, personAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	personAfterDeleteHooks = []PersonHook{}

	AddPersonHook(boil.BeforeUpsertHook, personBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	personBeforeUpsertHooks = []PersonHook{}

	AddPersonHook(boil.AfterUpsertHook, personAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	personAfterUpsertHooks = []PersonHook{}
}

func testPersonsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(personColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPersonToManyChildren(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c Child

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, childDBTypes, false, childColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PersonID = a.PersonID
	c.PersonID = a.PersonID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.Children().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PersonID == b.PersonID {
			bFound = true
		}
		if v.PersonID == c.PersonID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PersonSlice{&a}
	if err = a.L.LoadChildren(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Children); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Children = nil
	if err = a.L.LoadChildren(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Children); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPersonToManyAddOpChildren(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c, d, e Child

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Child{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, childDBTypes, false, strmangle.SetComplement(childPrimaryKeyColumns, childColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Child{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddChildren(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.PersonID != first.PersonID {
			t.Error("foreign key was wrong value", a.PersonID, first.PersonID)
		}
		if a.PersonID != second.PersonID {
			t.Error("foreign key was wrong value", a.PersonID, second.PersonID)
		}

		if first.R.Person != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Person != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Children[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Children[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Children().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPersonToOneUserUsingCreatedUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Person
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CreatedUserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CreatedUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := PersonSlice{&local}
	if err = local.L.LoadCreatedUser(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CreatedUser = nil
	if err = local.L.LoadCreatedUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CreatedUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPersonToOneUserUsingUpdatedUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Person
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, personDBTypes, false, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UpdatedUserID = foreign.UserID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.UpdatedUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.UserID != foreign.UserID {
		t.Errorf("want: %v, got %v", foreign.UserID, check.UserID)
	}

	slice := PersonSlice{&local}
	if err = local.L.LoadUpdatedUser(ctx, tx, false, (*[]*Person)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdatedUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.UpdatedUser = nil
	if err = local.L.LoadUpdatedUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.UpdatedUser == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPersonToOneSetOpUserUsingCreatedUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetCreatedUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CreatedUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CreatedUserPersons[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CreatedUserID != x.UserID {
			t.Error("foreign key was wrong value", a.CreatedUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CreatedUserID))
		reflect.Indirect(reflect.ValueOf(&a.CreatedUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CreatedUserID != x.UserID {
			t.Error("foreign key was wrong value", a.CreatedUserID, x.UserID)
		}
	}
}
func testPersonToOneSetOpUserUsingUpdatedUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Person
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, personDBTypes, false, strmangle.SetComplement(personPrimaryKeyColumns, personColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUpdatedUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.UpdatedUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UpdatedUserPersons[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UpdatedUserID != x.UserID {
			t.Error("foreign key was wrong value", a.UpdatedUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UpdatedUserID))
		reflect.Indirect(reflect.ValueOf(&a.UpdatedUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UpdatedUserID != x.UserID {
			t.Error("foreign key was wrong value", a.UpdatedUserID, x.UserID)
		}
	}
}

func testPersonsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPersonsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PersonSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPersonsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Persons().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	personDBTypes = map[string]string{`PersonID`: `bigint`, `FirstName`: `varchar`, `LastName`: `varchar`, `Birthday`: `date`, `Personality`: `tinyint`, `HasPartner`: `tinyint`, `Version`: `smallint`, `Deleted`: `tinyint`, `CreatedAt`: `datetime`, `CreatedUserID`: `bigint`, `UpdatedAt`: `datetime`, `UpdatedUserID`: `bigint`}
	_             = bytes.MinRead
)

func testPersonsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(personAllColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personDBTypes, true, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPersonsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(personAllColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Person{}
	if err = randomize.Struct(seed, o, personDBTypes, true, personColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, personDBTypes, true, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(personAllColumns, personPrimaryKeyColumns) {
		fields = personAllColumns
	} else {
		fields = strmangle.SetComplement(
			personAllColumns,
			personPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PersonSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPersonsUpsert(t *testing.T) {
	t.Parallel()

	if len(personAllColumns) == len(personPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPersonUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Person{}
	if err = randomize.Struct(seed, &o, personDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Person: %s", err)
	}

	count, err := Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, personDBTypes, false, personPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Person struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Person: %s", err)
	}

	count, err = Persons().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
